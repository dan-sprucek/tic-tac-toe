{"version":3,"sources":["components/Cell.js","components/Board.js","components/Scoreboard.js","components/Result.js","App.js","index.js"],"names":["Cell","handleClick","value","className","onClick","data-value","Board","id","Scoreboard","xScore","oScore","undefined","Result","inPlay","newGame","winner","App","useState","currentSymbol","setCurrentSymbol","xSelected","setXSelected","oSelected","setOSelected","setInPlay","setWinner","setXScore","setOScore","length","e","checkForWin","target","innerHTML","concat","dataset","includes","document","querySelectorAll","forEach","cell","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27d8e761.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cell = ({handleClick, value}) => {\r\n    return (\r\n        <div className='cell' onClick={handleClick} data-value={value}></div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nconst Board = ({handleClick}) => {\r\n    return (\r\n        <div id='board'>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='1'/>\r\n                <Cell handleClick={handleClick} value='2'/>\r\n                <Cell handleClick={handleClick} value='3'/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='4'/>\r\n                <Cell handleClick={handleClick} value='5'/>\r\n                <Cell handleClick={handleClick} value='6'/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='7'/>\r\n                <Cell handleClick={handleClick} value='8'/>\r\n                <Cell handleClick={handleClick} value='9'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react'\r\n\r\nconst Scoreboard = ({xScore, oScore}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2 className='scoreHeadline'>Scoreboard</h2>\r\n            <div className='score'>\r\n                <div className={xScore > oScore ? 'winning' : xScore < oScore ? 'losing' : undefined}>X : {xScore}</div>\r\n                <div className={oScore > xScore ? 'winning' : oScore < xScore ? 'losing' : undefined}>O : {oScore}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard","import React from 'react'\r\n\r\nconst Result = ({inPlay, newGame, winner}) => {\r\n    return (\r\n        <div>\r\n            {inPlay \r\n            ? <div className='resultContainer'><button onClick={newGame}>Restart the game</button></div> \r\n            : winner\r\n            ? <div className='resultContainer'><h2>{winner} wins the game! Congratulations!</h2><button onClick={newGame}>Start a new game</button></div>\r\n            : <div className='resultContainer'><h2>It's a tie!</h2><button onClick={newGame}>Start a new game</button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React, { useState } from 'react'\r\nimport Board from './components/Board'\r\nimport Scoreboard from './components/Scoreboard'\r\nimport Result from './components/Result'\r\n\r\n\r\nconst App = () => {\r\n    const [currentSymbol, setCurrentSymbol] = useState('X')\r\n    const [xSelected, setXSelected] = useState([])\r\n    const [oSelected, setOSelected] = useState([])\r\n    const [inPlay, setInPlay] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [xScore, setXScore] = useState(0)\r\n    const [oScore, setOScore] = useState(0)\r\n\r\n    \r\n    const handleClick = (e) => {\r\n        let checkForWin\r\n        if (inPlay) {\r\n            if (e.target.innerHTML === '') {\r\n                e.target.innerHTML = currentSymbol\r\n                if (currentSymbol === 'X') {\r\n                    setCurrentSymbol('O')\r\n                    setXSelected(xSelected.concat(e.target.dataset.value))\r\n                    checkForWin = xSelected.concat(e.target.dataset.value)\r\n                } else {\r\n                    setCurrentSymbol('X')\r\n                    setOSelected(oSelected.concat(e.target.dataset.value))\r\n                    checkForWin = oSelected.concat(e.target.dataset.value)\r\n                }\r\n                if ((checkForWin.includes('1') && checkForWin.includes('2') && checkForWin.includes('3')) \r\n                    || (checkForWin.includes('1') && checkForWin.includes('5') && checkForWin.includes('9'))\r\n                    || (checkForWin.includes('1') && checkForWin.includes('4') && checkForWin.includes('7'))\r\n                    || (checkForWin.includes('2') && checkForWin.includes('5') && checkForWin.includes('8'))\r\n                    || (checkForWin.includes('3') && checkForWin.includes('5') && checkForWin.includes('7'))\r\n                    || (checkForWin.includes('3') && checkForWin.includes('6') && checkForWin.includes('9'))\r\n                    || (checkForWin.includes('4') && checkForWin.includes('5') && checkForWin.includes('6'))\r\n                    || (checkForWin.includes('7') && checkForWin.includes('8') && checkForWin.includes('9'))) {\r\n                    setWinner(currentSymbol)\r\n                    if (currentSymbol === 'X') {\r\n                        setXScore(xScore + 1)\r\n                    } else {\r\n                        setOScore(oScore + 1)\r\n                    }\r\n                    setInPlay(false)\r\n                } else if (checkForWin.length === 5) {\r\n                    setInPlay(false)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        currentSymbol === 'X' ? setCurrentSymbol('X') : setCurrentSymbol('O')\r\n        setXSelected([])\r\n        setOSelected([])\r\n        setInPlay(true)\r\n        setWinner('')\r\n        let cells = document.querySelectorAll('div.cell')\r\n        cells.forEach(cell => cell.innerHTML = '')\r\n    }\r\n    \r\n    return (\r\n        <div className='container'>\r\n            <h1>Hello to Tic-Tac-Toe!</h1>\r\n            {xSelected.length === 0 && oSelected.length === 0 ? <h2>{currentSymbol} starts the game!</h2> : inPlay ? <h2>Next player is: {currentSymbol}</h2> : <h2>&nbsp;</h2>}\r\n            <Board handleClick={handleClick}/>\r\n            <Scoreboard xScore={xScore} oScore={oScore}/>\r\n            <Result inPlay={inPlay} newGame={newGame} winner={winner}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
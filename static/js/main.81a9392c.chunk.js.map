{"version":3,"sources":["components/Cell.js","components/Board.js","components/Scoreboard.js","components/Result.js","App.js","index.js"],"names":["Cell","handleClick","value","winningNumbers","className","includes","onClick","data-value","Board","id","Scoreboard","xScore","oScore","undefined","Result","inPlay","newGame","winner","App","useState","currentSymbol","setCurrentSymbol","xSelected","setXSelected","oSelected","setOSelected","setInPlay","setWinner","setXScore","setOScore","setWinningNumbers","winningCombinations","length","e","checkForWin","target","innerHTML","concat","dataset","result","filter","combination","every","number","win","document","querySelectorAll","forEach","cell","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81a9392c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cell = ({handleClick, value, winningNumbers}) => {\r\n    return (\r\n        <div className={winningNumbers.includes(value) ? 'cell winningNumbers' : 'cell'}  onClick={handleClick} data-value={value}></div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nconst Board = ({handleClick, winningNumbers}) => {\r\n    return (\r\n        <div id='board'>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='1' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='2' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='3' winningNumbers={winningNumbers}/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='4' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='5' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='6' winningNumbers={winningNumbers}/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell handleClick={handleClick} value='7' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='8' winningNumbers={winningNumbers}/>\r\n                <Cell handleClick={handleClick} value='9' winningNumbers={winningNumbers}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react'\r\n\r\nconst Scoreboard = ({xScore, oScore}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2 className='scoreHeadline'>Scoreboard</h2>\r\n            <div className='score'>\r\n                <div className={xScore > oScore ? 'winning' : xScore < oScore ? 'losing' : undefined}>X : {xScore}</div>\r\n                <div className={oScore > xScore ? 'winning' : oScore < xScore ? 'losing' : undefined}>O : {oScore}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard","import React from 'react'\r\n\r\nconst Result = ({inPlay, newGame, winner}) => {\r\n    return (\r\n        <div>\r\n            {inPlay \r\n            ? <div className='resultContainer'><button onClick={newGame}>Restart the game</button></div> \r\n            : winner\r\n            ? <div className='resultContainer'><h2>{winner} wins the game! Congratulations!</h2><button onClick={newGame}>Start a new game</button></div>\r\n            : <div className='resultContainer'><h2>It's a tie!</h2><button onClick={newGame}>Start a new game</button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React, { useState } from 'react'\r\nimport Board from './components/Board'\r\nimport Scoreboard from './components/Scoreboard'\r\nimport Result from './components/Result'\r\n\r\n\r\nconst App = () => {\r\n    const [currentSymbol, setCurrentSymbol] = useState('X')\r\n    const [xSelected, setXSelected] = useState([])\r\n    const [oSelected, setOSelected] = useState([])\r\n    const [inPlay, setInPlay] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [xScore, setXScore] = useState(0)\r\n    const [oScore, setOScore] = useState(0)\r\n    const [winningNumbers, setWinningNumbers] = useState([])\r\n    const winningCombinations = [\r\n        ['1', '2', '3'],\r\n        ['1', '5', '9'],\r\n        ['1', '4', '7'],\r\n        ['2', '5', '8'],\r\n        ['3', '5', '7'],\r\n        ['3', '6', '9'],\r\n        ['4', '5', '6'],\r\n        ['7', '8', '9'],\r\n    ]\r\n\r\n    const win = (winningCombinations, checkForWin) => {\r\n        let result = winningCombinations.filter(combination => {\r\n            return combination.every(number => checkForWin.includes(number))\r\n        })\r\n        if (result.length > 0) {\r\n            setWinningNumbers(result[0])\r\n            return true\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        if (inPlay) {\r\n            if (e.target.innerHTML === '') {\r\n                let checkForWin\r\n                e.target.innerHTML = currentSymbol\r\n                if (currentSymbol === 'X') {\r\n                    setCurrentSymbol('O')\r\n                    setXSelected(xSelected.concat(e.target.dataset.value))\r\n                    checkForWin = xSelected.concat(e.target.dataset.value)\r\n                } else {\r\n                    setCurrentSymbol('X')\r\n                    setOSelected(oSelected.concat(e.target.dataset.value))\r\n                    checkForWin = oSelected.concat(e.target.dataset.value)\r\n                }\r\n                if (win(winningCombinations, checkForWin)) {\r\n                    setWinner(currentSymbol)\r\n                    if (currentSymbol === 'X') {\r\n                        setXScore(xScore + 1)\r\n                    } else {\r\n                        setOScore(oScore + 1)\r\n                    }\r\n                    setInPlay(false)\r\n                } else if (checkForWin.length === 5) {\r\n                    setInPlay(false)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        currentSymbol === 'X' ? setCurrentSymbol('X') : setCurrentSymbol('O')\r\n        setXSelected([])\r\n        setOSelected([])\r\n        setInPlay(true)\r\n        setWinner('')\r\n        setWinningNumbers([])\r\n        document.querySelectorAll('div.cell').forEach(cell => cell.innerHTML = '')\r\n    }\r\n    \r\n    return (\r\n        <div className='container'>\r\n            <h1>Hello to Tic-Tac-Toe!</h1>\r\n            {xSelected.length === 0 && oSelected.length === 0 ? <h2>{currentSymbol} starts the game!</h2> : inPlay ? <h2>Next player is: {currentSymbol}</h2> : <h2>&nbsp;</h2>}\r\n            <Board handleClick={handleClick} winningNumbers={winningNumbers}/>\r\n            <Scoreboard xScore={xScore} oScore={oScore}/>\r\n            <Result inPlay={inPlay} newGame={newGame} winner={winner}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}